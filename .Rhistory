#docs <- tm_map(docs, removeNumbers)
# Remove your own stop word
# specify your stopwords as a character vector
#docs <- tm_map(docs, removeWords, c('"'))
# Remove punctuations
#docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
#docs <- tm_map(docs, stripWhitespace)
#newBigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 1, max = 2))
dtm <- TermDocumentMatrix(docs, control = list(wordLengths = c(1, Inf)))
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
# Import data from social_norms.xls
rm(list=ls())
library(tidyverse)
library(wordcloud)
library(tm)
library(RWeka)
# read data
master <- readxl::read_xlsx(path = "Social Norms meta.xlsx", sheet = "ALL")
keywords <- master %>% group_by(PaperID) %>% arrange(PaperID) %>%filter(row_number()==1)%>% ungroup() %>% select(Keywords) %>% sapply(str_split, pattern=";") %>% unlist()
docs <- VCorpus(VectorSource(keywords))
#toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
#docs <- tm_map(docs, removeNumbers)
# Remove your own stop word
# specify your stopwords as a character vector
#docs <- tm_map(docs, removeWords, c('"'))
# Remove punctuations
#docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
#docs <- tm_map(docs, stripWhitespace)
#newBigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 1, max = 2))
dtm <- TermDocumentMatrix(docs, control = list(wordLengths = c(1, Inf)))
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 2,
max.words=200, random.order=FALSE, rot.per=0.1,
colors=brewer.pal(8, "Dark2"))
# Import data from social_norms.xls
rm(list=ls())
gc()
setwd("~/GitHub/social-norms-network-authors/Analysis")
setwd("../")
authors_net <- read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
subset.data.frame(subset = Method_elicitation =="KW" |
Method_elicitation =="Bicchieri" |
Method_elicitation =="Both")
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
subset.data.frame(subset = Method_elicitation =="KW" |
Method_elicitation =="Bicchieri" |
Method_elicitation =="Both")
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
subset.data.frame(subset = Method_elicitation =="KW" |
Method_elicitation =="Bicchieri" |
Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T)
View(authors_net)
library(tidyverse)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
subset.data.frame(subset = Method_elicitation =="KW" |
Method_elicitation =="Bicchieri" |
Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
authors_n <- authors_net[grep("--", authors_net$New_authors), ]
authors_n
grep("--", authors_net$New_authors)
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--"))
View(authors_n)
authors_solo <- authors_net[-grep("--", authors_net$New_authors), ]
authors_solo
authors_n$New_authors
# data wrangling from https://stackoverflow.com/questions/57487704/how-to-split-a-string-of-author-names-by-comma-into-a-data-frame-and-generate-an
SplitAuthors <- sapply(authors_n$New_authors, strsplit, split = "--", fixed = TRUE)
SplitAuthors
AuthorCombinations <- sapply(SplitAuthors,function(x){combn(unlist(x),m = 2)})
AuthorCombinations <- sapply(SplitAuthors,function(x){combn(unlist(x),m = 2)})
AuthorCombinations
AuthorEdges <- rapply(AuthorCombinations,unlist)
AuthorEdges
AuthorEdges
AuthorCombinations
names(AuthorEdges) <- NULL
AuthorEdges <- trimws(AuthorEdges)
AuthorEdges
AuthorGraph <- graph(AuthorEdges, directed = FALSE)
library(igraph)
AuthorGraph <- graph(AuthorEdges, directed = FALSE)
AuthorGraph
help("rapply")
AuthorCombinations
AuthorEdges <- rapply(AuthorCombinations,unlist)
AuthorEdges
View(AuthorEdges)
str(AuthorEdges)
names(AuthorEdges) <- NULL
View(AuthorEdges)
AuthorEdges
AuthorEdges <- trimws(AuthorEdges)
AuthorEdges
AuthorEdges <- rapply(AuthorCombinations,unlist)
AuthorEdges
AuthorEdges <- rapply(AuthorCombinations,unlist)
AuthorCombinations
AuthorEdges <- rapply(AuthorCombinations,unlist)
names(AuthorEdges) <- NULL
AuthorEdges <- trimws(AuthorEdges)
AuthorGraph <- graph(AuthorEdges, directed = FALSE)
AuthorGraph
as_ids(V(AuthorGraph))
authors_solo
length(authors_solo)
# method KW
l_method <- list()
for(i in 1:length(authors_n$Method_elicitation)){
l_method[[i]] <- data.frame(id=SplitAuthors[[i]], method=rep(authors_n$Method_elicitation[i],authors_n$numberoauthors[i]))
}
l_method_sum <- do.call(rbind, l_method) %>% group_by(id) %>% summarise(n_KW=sum(method=="KW")+sum(method=="Both"),n_BX=sum(method=="Bicchieri")+sum(method=="Both")) %>% mutate(d=(n_KW-n_BX)/(n_KW+n_BX))
Nodes <- data.frame(id=as_ids(V(AuthorGraph)), label=as_ids(V(AuthorGraph))) %>%
merge.data.frame(l_method_sum) %>%
mutate(color = ifelse(d < -.5, "blue",ifelse(d < -.01, "grey", ifelse(d < .5, "green", "red")))) %>%
mutate(title = paste0("<p><b>", id,"</b><br>","Bicchieri = ", n_BX, "<br> Krupka = ", n_KW, "</p>"))
Edges <- data.frame(matrix(AuthorEdges, ncol=2, byrow = T))
colnames(Edges) <- c("from", "to")
Nodes
Edges
AuthorEdges
matrix(AuthorEdges, ncol=2, byrow = T)
colnames(Edges) <- c("from", "to")
Edges
plot_net <- visNetwork(Nodes, Edges) %>%
#visIgraphLayout(layout = "layout_with_fr") %>%
visOptions(highlightNearest = list(enabled = T, hover = T),
nodesIdSelection = T)
plot(AuthorGraph,layout = layout_with_graphopt, edge.arrow.size = 0.2, vertex.cex = 0.7, mode = "circle")
library(visNetwork)
plot_net <- visNetwork(Nodes, Edges) %>%
#visIgraphLayout(layout = "layout_with_fr") %>%
visOptions(highlightNearest = list(enabled = T, hover = T),
nodesIdSelection = T)
plot_net
# Import data
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
library(igraph)
library(tidyverse)
library(visNetwork)
rm(list=ls())
# Import data
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
authors_n <- authors_net[grep("--", authors_net$New_authors), ]
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--"))
# Import data
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = "PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation")
# Import data
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = "PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation") %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
# Import data
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = c("PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation")) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
View(authors_net)
authors_n <- authors_net[grep("--", authors_net$New_authors), ] # take only co-authored papers
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--")) # compute number of coauthors
# Create nodes and edges ----
# data wrangling from https://stackoverflow.com/questions/57487704/how-to-split-a-string-of-author-names-by-comma-into-a-data-frame-and-generate-an
SplitAuthors <- sapply(authors_n$New_authors, strsplit, split = "--", fixed = TRUE) #
View(SplitAuthors)
AuthorCombinations <- sapply(SplitAuthors,function(x){combn(unlist(x),m = 2)}) # compute all poss. combinats. among co-authors
View(AuthorCombinations)
AuthorCombinations[["Simon Gachter--Daniele Nosenzo--Martin Sefton"]]
AuthorEdges <- rapply(AuthorCombinations,unlist) # transform matrix into list
AuthorEdges
AuthorEdges <- trimws(AuthorEdges)
View(AuthorEdges)
AuthorGraph <- graph(AuthorEdges, directed = FALSE)
graph(AuthorEdges, directed = FALSE)
AuthorEdges
AuthorEdges[["Jennifer M. Murray--Erik Kimbrough--Erin Krupka--Abhijit Ramalingam--Rajnish Kumar--Joanna McHugh Power--Sharon Sanchez-Franco--Olga L. Sarmiento--Frank Kee--Ruth F. Hunter27"]]
AuthorGraph <- graph(AuthorEdges, directed = FALSE)
V(AuthorGraph)
sapply(AuthorEdges, distinct, PaperID)
AuthorEdges %>% distinct(PaperID)
authors_solo <- authors_net[-grep("--", authors_net$New_authors), ]
authors_solo
# Import data ----
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = c("PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation")) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
authors_n <- authors_net[grep("--", authors_net$New_authors), ] # take only co-authored papers
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--")) # compute number of coauthors
authors_solo <- authors_net[-grep("--", authors_net$New_authors), ]
authors_solo
View(authors_solo)
rm(list=ls())
# Import data ----
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = c("PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation")) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
# Import data ----
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = c("PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation")) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--")) # compute number of coauthors
authors_n <- authors_net
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--")) # compute number of coauthors
View(authors_n)
# Create nodes and edges ----
# data wrangling from https://stackoverflow.com/questions/57487704/how-to-split-a-string-of-author-names-by-comma-into-a-data-frame-and-generate-an
SplitAuthors <- sapply(authors_n$New_authors, strsplit, split = "--", fixed = TRUE) # list of characters, each list is a paper
View(SplitAuthors)
AuthorCombinations <- sapply(SplitAuthors,function(x){combn(unlist(x),m = 2)}) # compute all poss. combinats. among co-authors
authors_solo
authors_solo <- authors_net[-grep("--", authors_net$New_authors), ]
authors_solo
# Import data ----
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = c("PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation")) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
authors_n <- authors_net[grep("--", authors_net$New_authors), ] # take only co-authored papers
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--")) # compute number of coauthors
authors_solo <- authors_net[-grep("--", authors_net$New_authors), ]
# Create nodes and edges ----
# data wrangling from https://stackoverflow.com/questions/57487704/how-to-split-a-string-of-author-names-by-comma-into-a-data-frame-and-generate-an
SplitAuthors <- sapply(authors_n$New_authors, strsplit, split = "--", fixed = TRUE) # list of characters, each list is a paper
AuthorCombinations <- sapply(SplitAuthors,function(x){combn(unlist(x),m = 2)}) # compute all poss. combinats. among co-authors
View(AuthorCombinations)
AuthorEdges <- rapply(AuthorCombinations,unlist) # transform matrix into list
names(AuthorEdges) <- NULL
AuthorEdges <- trimws(AuthorEdges)
AuthorGraph <- graph(AuthorEdges, directed = FALSE)
# method KW
l_method <- list()
for(i in 1:length(authors_n$Method_elicitation)){
l_method[[i]] <- data.frame(id=SplitAuthors[[i]], method=rep(authors_n$Method_elicitation[i],authors_n$numberoauthors[i]))
}
l_method_sum <- do.call(rbind, l_method) %>% group_by(id) %>% summarise(n_KW=sum(method=="KW")+sum(method=="Both"),n_BX=sum(method=="Bicchieri")+sum(method=="Both")) %>% mutate(d=(n_KW-n_BX)/(n_KW+n_BX))
Nodes <- data.frame(id=as_ids(V(AuthorGraph)), label=as_ids(V(AuthorGraph))) %>%
merge.data.frame(l_method_sum) %>%
mutate(color = ifelse(d < -.5, "blue",ifelse(d < -.01, "grey", ifelse(d < .5, "green", "red")))) %>%
mutate(title = paste0("<p><b>", id,"</b><br>","Bicchieri = ", n_BX, "<br> Krupka = ", n_KW, "</p>"))
Nodes
317+29
Nodes
Nodes <- data.frame(id=as_ids(V(AuthorGraph)), label=as_ids(V(AuthorGraph)))
Nodes
View(authors_solo)
authors_solo$Authors %in% Nodes$id
sum(authors_solo$Authors %in% Nodes$id)
authors_solo[authors_solo$Authors %in% Nodes$id]
authors_solo[authors_solo$Authors %in% Nodes$id, ]
View(authors_solo[authors_solo$Authors %in% Nodes$id, ])
View(Nodes)
authors_solo[!(authors_solo$Authors %in% Nodes$id), ]
View(authors_solo[!(authors_solo$Authors %in% Nodes$id), ])
AuthorEdges <- trimws(AuthorEdges)
# script for network analysis
library(igraph)
library(tidyverse)
library(visNetwork)
rm(list=ls())
setwd("../")
# Import data ----
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = c("PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation")) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
authors_n <- authors_net[grep("--", authors_net$New_authors), ] # take only co-authored papers
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--")) # compute number of coauthors
authors_solo <- authors_net[-grep("--", authors_net$New_authors), ]
# Create nodes and edges ----
# data wrangling from https://stackoverflow.com/questions/57487704/how-to-split-a-string-of-author-names-by-comma-into-a-data-frame-and-generate-an
SplitAuthors <- sapply(authors_n$New_authors, strsplit, split = "--", fixed = TRUE) # list of characters, each list is a paper
AuthorCombinations <- sapply(SplitAuthors,function(x){combn(unlist(x),m = 2)}) # compute all poss. combinats. among co-authors
AuthorEdges <- rapply(AuthorCombinations,unlist) # transform matrix into list
names(AuthorEdges) <- NULL
AuthorEdges <- trimws(AuthorEdges)
setwd("~/GitHub/social-norms-network-authors/Analysis")
library(igraph)
library(tidyverse)
library(visNetwork)
rm(list=ls())
setwd("../")
# Import data ----
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = c("PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation")) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
authors_n <- authors_net[grep("--", authors_net$New_authors), ] # take only co-authored papers
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--")) # compute number of coauthors
authors_solo <- authors_net[-grep("--", authors_net$New_authors), ]
# Create nodes and edges ----
# data wrangling from https://stackoverflow.com/questions/57487704/how-to-split-a-string-of-author-names-by-comma-into-a-data-frame-and-generate-an
SplitAuthors <- sapply(authors_n$New_authors, strsplit, split = "--", fixed = TRUE) # list of characters, each list is a paper
AuthorCombinations <- sapply(SplitAuthors,function(x){combn(unlist(x),m = 2)}) # compute all poss. combinats. among co-authors
AuthorEdges <- rapply(AuthorCombinations,unlist) # transform matrix into list
names(AuthorEdges) <- NULL
AuthorEdges <- trimws(AuthorEdges)
View(AuthorEdges)
graph(c("A","B","C"), directed = F)
graph(c("A","B","C", "D"), directed = F)
Nodes <- data.frame(id=as_ids(V(AuthorGraph)), label=as_ids(V(AuthorGraph)))
Nodes <- data.frame(id=as_ids(V(AuthorGraph)), label=as_ids(V(AuthorGraph)))
# script for network analysis
library(igraph)
library(tidyverse)
library(visNetwork)
rm(list=ls())
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = c("PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation")) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
authors_n <- authors_net[grep("--", authors_net$New_authors), ] # take only co-authored papers
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--")) # compute number of coauthors
authors_solo <- authors_net[-grep("--", authors_net$New_authors), ]
# Create nodes and edges ----
# data wrangling from https://stackoverflow.com/questions/57487704/how-to-split-a-string-of-author-names-by-comma-into-a-data-frame-and-generate-an
SplitAuthors <- sapply(authors_n$New_authors, strsplit, split = "--", fixed = TRUE) # list of characters, each list is a paper
AuthorCombinations <- sapply(SplitAuthors,function(x){combn(unlist(x),m = 2)}) # compute all poss. combinats. among co-authors
AuthorEdges <- rapply(AuthorCombinations,unlist) # transform matrix into list
names(AuthorEdges) <- NULL
AuthorEdges <- trimws(AuthorEdges)
AuthorGraph <- graph(AuthorEdges, directed = FALSE)
Nodes <- data.frame(id=as_ids(V(AuthorGraph)), label=as_ids(V(AuthorGraph)))
Nodes
all_nodes = merge.data.frame(Nodes, authors_solo$Authors, by.x = T)
all_nodes = merge.data.frame(Nodes, authors_solo$Authors, by.x = "id")
all_nodes = merge.data.frame(Nodes, authors_solo$Authors, by.x = "id", by.y="Authors")
authors_solo$Author
authors_solo$Authors
authors_solo <- authors_solo%>%mutate(id=Authors)
View(authors_solo)
all_nodes = rbind.data.frame(Nodes, authors_solo$Authors, by="id)
)
)
all_nodes = rbind.data.frame(Nodes, authors_solo$Authors, by="id")
View(all_nodes)
authors_solo
all_nodes = rbind.data.frame(Nodes, authors_solo$id, by="id")
all_nodes = rbind.data.frame(Nodes, authors_solo$id)
all_nodes = rbind.data.frame(Nodes, authors_solo$id, by=id)
all_nodes = rbind.data.frame(Nodes, authors_solo$id, by="id")
Nodes$id %in% all_nodes$id
!(Nodes$id %in% all_nodes$id)
Nodes$id[!(Nodes$id %in% all_nodes$id), ]
Nodes$id[!(Nodes$id %in% all_nodes$id)]
all_nodes$id[!(all_nodes$id %in% Nodes$id), ]
all_nodes$id[!(all_nodes$id %in% Nodes$id)]
all_nodes = rbind.data.frame(Nodes, authors_solo, by="id")
all_nodes = rbind.data.frame(Nodes, authors_solo %>% subset.data.frame(select = id), by="id", )
all_nodes = rbind.data.frame(Nodes, authors_solo %>% subset.data.frame(select = id), by="id")
Nodes
authors_solo
class(Nodes)
class(authors_solo)
as.data.frame(authors_solo)
ciao=as.data.frame(authors_solo)
as.data.frame(authors_solo %>% subset.data.frame(select = c(id)) %>% mutate(label=id))
ciao=as.data.frame(authors_solo %>% subset.data.frame(select = c(id)) %>% mutate(label=id))
rbind.data.frame(Nodes, ciao)
all=rbind.data.frame(Nodes, ciao)
all %>% distinct(id)
write.csv(all %>% distinct(id), file = "ciao.csv", row.names = F)
all %>% distinct(id)
View(all %>% distinct(id))
library(igraph)
library(tidyverse)
library(visNetwork)
rm(list=ls())
# Import data ----
## filter for method elicitation (only KW - BX - Both in the lab)
authors_net <- readxl::read_excel("Social Norms meta.xlsx", sheet = "ALL") %>%
#subset.data.frame(subset = Method_elicitation =="KW" |
#                   Method_elicitation =="Bicchieri" |
#                  Method_elicitation =="Both") %>%
distinct(PaperID, .keep_all = T) %>% subset.data.frame(select = c("PaperID", "Authors", "Year", "Outlet", "Published", "Game_type", "Method_elicitation")) %>%
mutate(New_authors = str_replace_all(Authors, ";", "--"))
authors_n <- authors_net[grep("--", authors_net$New_authors), ] # take only co-authored papers
authors_n$numberoauthors <- (1+str_count(authors_n$New_authors, "--")) # compute number of coauthors
authors_solo <- authors_net[-grep("--", authors_net$New_authors), ]
# Create nodes and edges ----
# data wrangling from https://stackoverflow.com/questions/57487704/how-to-split-a-string-of-author-names-by-comma-into-a-data-frame-and-generate-an
SplitAuthors <- sapply(authors_n$New_authors, strsplit, split = "--", fixed = TRUE) # list of characters, each list is a paper
AuthorCombinations <- sapply(SplitAuthors,function(x){combn(unlist(x),m = 2)}) # compute all poss. combinats. among co-authors
AuthorEdges <- rapply(AuthorCombinations,unlist) # transform matrix into list
names(AuthorEdges) <- NULL
AuthorEdges <- trimws(AuthorEdges)
AuthorGraph <- graph(AuthorEdges, directed = FALSE)
ciao=as.data.frame(authors_solo %>% subset.data.frame(select = c(id)) %>% mutate(label=id))
authors_solo
ciao=as.data.frame(authors_solo %>% subset.data.frame(select = c(id)) %>% mutate(label=id))
ciao=as.data.frame(authors_solo %>% subset.data.frame(select = c(Authors)) %>% mutate(id=Authors, label=Authors))
View(ciao)
ciao=as.data.frame(authors_solo %>% subset.data.frame(select = c(Authors)) %>% mutate(id=Authors, label=Authors)) %>% subset.data.frame(select = -c(Authors))
all=rbind.data.frame(Nodes, ciao)
Nodes <- data.frame(id=as_ids(V(AuthorGraph)), label=as_ids(V(AuthorGraph)))
all=rbind.data.frame(Nodes, ciao)
View(all %>% distinct(id))
write.csv(all %>% distinct(id), file = "all_nodes.csv", row.names = F)
# method KW
l_method <- list()
for(i in 1:length(authors_n$Method_elicitation)){
l_method[[i]] <- data.frame(id=SplitAuthors[[i]], method=rep(authors_n$Method_elicitation[i],authors_n$numberoauthors[i]))
}
View(l_method)
SplitAuthors
authors_n$Method_elicitation[i]
Nodes <- data.frame(id=as_ids(V(AuthorGraph)), label=as_ids(V(AuthorGraph))) %>%
merge.data.frame(l_method_sum) %>%
mutate(color = ifelse(d < -.5, "blue",ifelse(d < -.01, "grey", ifelse(d < .5, "green", "red")))) %>%
mutate(title = paste0("<p><b>", id,"</b><br>","Bicchieri = ", n_BX, "<br> Krupka = ", n_KW, "</p>"))
Edges <- data.frame(matrix(AuthorEdges, ncol=2, byrow = T))
l_method_sum <- do.call(rbind, l_method) %>% group_by(id) %>% summarise(n_KW=sum(method=="KW")+sum(method=="Both"),n_BX=sum(method=="Bicchieri")+sum(method=="Both")) %>% mutate(d=(n_KW-n_BX)/(n_KW+n_BX))
Nodes <- data.frame(id=as_ids(V(AuthorGraph)), label=as_ids(V(AuthorGraph))) %>%
merge.data.frame(l_method_sum) %>%
mutate(color = ifelse(d < -.5, "blue",ifelse(d < -.01, "grey", ifelse(d < .5, "green", "red")))) %>%
mutate(title = paste0("<p><b>", id,"</b><br>","Bicchieri = ", n_BX, "<br> Krupka = ", n_KW, "</p>"))
Edges <- data.frame(matrix(AuthorEdges, ncol=2, byrow = T))
colnames(Edges) <- c("from", "to")
plot_net <- visNetwork(Nodes, Edges) %>%
#visIgraphLayout(layout = "layout_with_fr") %>%
visOptions(highlightNearest = list(enabled = T, hover = T),
nodesIdSelection = T)
plot_net
plot(AuthorGraph)
plot(AuthorGraph, label=NA)
edge_density(AuthorEdges)
edge_density(AuthorGraph)
transitivity(AuthorGraph, type="global")
diameter(AuthorGraph)
deg <- degree(AuthorGraph, mode="all")
deg
hist(deg, breaks=1:vcount(net)-1, main="Histogram of node degree")
hist(deg, breaks=1:vcount(net)-1, main="Histogram of node degree")
hist(deg, breaks=1:vcount(AuthorGraph)-1, main="Histogram of node degree")
hist(deg, main="Histogram of node degree")
eigen_centrality(AuthorGraph, directed=F, weights=NA)
c=eigen_centrality(AuthorGraph, directed=F, weights=NA)
View(c)
View(c$vector)
View(c[[1]])
centr_eigen(AuthorGraph, directed=F, normalized=T)
cliques(AuthorGraph)
sapply(cliques(AuthorGraph), length)
largest_cliques(AuthorGraph)
vcol <- rep("grey80", vcount(AuthorGraph))
vcol[unlist(largest_cliques(AuthorGraph))] <- "gold"
plot(as.undirected(AuthorGraph), vertex.label=V(AuthorGraph)$name, vertex.color=vcol)
ceb <- cluster_edge_betweenness(AuthorGraph)
dendPlot(ceb, mode="hclust")
plot(ceb, AuthorGraph)
View(Nodes)
assortativity_degree(AuthorGraph, directed=F)
View(Nodes)
View(Edges)
write.csv(Edges, file = "edges.csv", row.names = F)
write.csv(Nodes, file = "nodes.csv", row.names = F)
